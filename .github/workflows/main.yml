name: Build OpenAWE
on: ['push', 'pull_request']

env:
  BUILD_TYPE: Release
  VCPKG_DEFAULT_TRIPLET: x64-windows

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Linux GCC
            os: ubuntu-20.04
            compiler: gcc
            extra_cmake_args: -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          - name: Linux Clang
            os: ubuntu-20.04
            compiler: clang
            extra_cmake_args: -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          - name: Windows MSVC
            os: windows-2019
            extra_cmake_args: -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          - name: MacOS Clang
            os: macos-11
            compiler: clang
            extra_cmake_args: -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DOPENAL_LIBRARY=/usr/local/opt/openal-soft/lib/libopenal.dylib -DOPENAL_INCLUDE_DIR=/usr/local/opt/openal-soft/include/AL

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Install dependencies with APT
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            libtinyxml2-dev \
            zlib1g-dev \
            libgl-dev \
            libglfw3-dev \
            libopenal-dev \
            libglm-dev \
            libbullet-dev \
            libfmt-dev \
            libogg-dev \
            libtheora-dev \
            libvorbis-dev \
            libspdlog-dev \
            libglew-dev \
            libgtest-dev \
            ccache

      - name: Override cache folder for vcpkg
        if: ${{ matrix.os == 'windows-2019' }}
        shell: bash
        run: |
          mkdir vcpkg-cache
          echo "VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg-cache" >> $GITHUB_ENV
          vcpkg update
          vcpkg install --dry-run zlib glfw3 libogg libvorbis libtheora spdlog glew openal-soft bullet3 fmt gtest tinyxml2 glm opengl >> vcpkg-cache/vcpkg_dry_run.txt

      - name: Cache dependencies for vcpkg
        if: ${{ matrix.os == 'windows-2019' }}
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg-cache
          key: ${{ matrix.os }}-build-vcpkg-cache-${{ github.ref_name }}-${{ hashFiles('vcpkg-cache/*') }}
          restore-keys: |
            ${{ matrix.os }}-build-vcpkg-cache-${{ github.ref_name }}-
            ${{ matrix.os }}-build-vcpkg-cache-master-
            ${{ matrix.os }}-build-vcpkg-cache-

      - name: Install dependencies with vcpkg
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          vcpkg install zlib glfw3 libogg libvorbis libtheora spdlog glew openal-soft bullet3 fmt gtest tinyxml2 glm opengl

      - name: Install dependencies with brew
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          brew update
          brew install zlib glfw libogg libvorbis theora spdlog glew openal-soft bullet fmt googletest tinyxml2 glm ccache

      - name: Cache non-Windows build with ccache
        if: ${{ matrix.os != 'windows-2019' }}
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.ccache
          key: ${{ matrix.os }}-${{ matrix.compiler }}-build-compile-cache-${{ github.ref_name }}-${{ hashFiles('**/src/*.cpp', '**/src/*.h') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.compiler }}-build-compile-cache-${{ github.ref_name }}-
            ${{ matrix.os }}-${{ matrix.compiler }}-build-compile-cache-master-
            ${{ matrix.os }}-${{ matrix.compiler }}-build-compile-cache-

      - name: Setup ccache
        if: ${{ matrix.os != 'windows-2019' }}
        shell: bash
        run: |
          echo "CCACHE_COMPILER=${{ matrix.compiler }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=400M" >> $GITHUB_ENV

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B $GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{ matrix.extra_cmake_args }} .

      - name: Build
        shell: bash
        run: cmake --build $GITHUB_WORKSPACE/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

      - name: Pack Artifacts
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cpack

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{github.workspace}}/build/*.zip
